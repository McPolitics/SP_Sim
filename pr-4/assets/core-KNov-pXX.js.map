{"version":3,"file":"core-KNov-pXX.js","sources":["../../src/core/EventSystem.js","../../src/core/SaveSystem.js","../../src/core/EconomicSimulation.js","../../src/core/GameEngine.js"],"sourcesContent":["/**\n * EventSystem - Centralized event handling and dispatching for SP_Sim\n * Enables loose coupling between game modules through event-driven architecture\n */\nexport class EventSystem {\n  constructor() {\n    this.listeners = new Map();\n    this.eventQueue = [];\n    this.isProcessing = false;\n  }\n\n  /**\n   * Subscribe to an event type\n   * @param {string} eventType - The type of event to listen for\n   * @param {Function} callback - Function to call when event is dispatched\n   * @param {Object} context - Optional context for the callback\n   * @returns {Function} Unsubscribe function\n   */\n  on(eventType, callback, context = null) {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, []);\n    }\n\n    const listener = { callback, context };\n    this.listeners.get(eventType).push(listener);\n\n    // Return unsubscribe function\n    return () => this.off(eventType, callback);\n  }\n\n  /**\n   * Unsubscribe from an event type\n   * @param {string} eventType - The event type to unsubscribe from\n   * @param {Function} callback - The callback function to remove\n   */\n  off(eventType, callback) {\n    if (!this.listeners.has(eventType)) return;\n\n    const listeners = this.listeners.get(eventType);\n    const index = listeners.findIndex((listener) => listener.callback === callback);\n\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n\n    // Clean up empty listener arrays\n    if (listeners.length === 0) {\n      this.listeners.delete(eventType);\n    }\n  }\n\n  /**\n   * Dispatch an event immediately\n   * @param {string} eventType - The type of event to dispatch\n   * @param {Object} data - Data to pass to event listeners\n   */\n  emit(eventType, data = {}) {\n    if (!this.listeners.has(eventType)) return;\n\n    const event = {\n      type: eventType,\n      data,\n      timestamp: Date.now(),\n    };\n\n    const listeners = this.listeners.get(eventType);\n\n    // Create a copy to avoid issues if listeners are modified during iteration\n    [...listeners].forEach((listener) => {\n      try {\n        if (listener.context) {\n          listener.callback.call(listener.context, event);\n        } else {\n          listener.callback(event);\n        }\n      } catch (error) {\n        console.error(`Error in event listener for ${eventType}:`, error);\n      }\n    });\n  }\n\n  /**\n   * Queue an event for later processing\n   * @param {string} eventType - The type of event to queue\n   * @param {Object} data - Data to pass to event listeners\n   */\n  queue(eventType, data = {}) {\n    this.eventQueue.push({\n      type: eventType,\n      data,\n      timestamp: Date.now(),\n    });\n  }\n\n  /**\n   * Process all queued events\n   */\n  processQueue() {\n    if (this.isProcessing) return;\n\n    this.isProcessing = true;\n\n    while (this.eventQueue.length > 0) {\n      const event = this.eventQueue.shift();\n      this.emit(event.type, event.data);\n    }\n\n    this.isProcessing = false;\n  }\n\n  /**\n   * Clear all event listeners\n   */\n  clear() {\n    this.listeners.clear();\n    this.eventQueue = [];\n    this.isProcessing = false;\n  }\n\n  /**\n   * Get statistics about the event system\n   * @returns {Object} Event system statistics\n   */\n  getStats() {\n    return {\n      eventTypes: this.listeners.size,\n      totalListeners: Array.from(this.listeners.values()).reduce((sum, arr) => sum + arr.length, 0),\n      queuedEvents: this.eventQueue.length,\n      isProcessing: this.isProcessing,\n    };\n  }\n}\n\n// Event type constants for better maintainability\nexport const EVENTS = {\n  // Game flow events\n  GAME_START: 'game:start',\n  GAME_PAUSE: 'game:pause',\n  GAME_RESUME: 'game:resume',\n  GAME_SAVE: 'game:save',\n  GAME_LOAD: 'game:load',\n  TURN_START: 'turn:start',\n  TURN_END: 'turn:end',\n\n  // Economic events\n  ECONOMY_UPDATE: 'economy:update',\n  GDP_CHANGE: 'economy:gdp_change',\n  UNEMPLOYMENT_CHANGE: 'economy:unemployment_change',\n  INFLATION_CHANGE: 'economy:inflation_change',\n  POLICY_ECONOMIC_EFFECT: 'economy:policy_effect',\n\n  // Political events\n  APPROVAL_CHANGE: 'politics:approval_change',\n  ELECTION_CALLED: 'politics:election_called',\n  VOTE_SCHEDULED: 'politics:vote_scheduled',\n  COALITION_CHANGE: 'politics:coalition_change',\n  POLICY_PROPOSED: 'politics:policy_proposed',\n  POLICY_PASSED: 'politics:policy_passed',\n  POLICY_FAILED: 'politics:policy_failed',\n\n  // Global events\n  DIPLOMATIC_CHANGE: 'global:diplomatic_change',\n  TRADE_AGREEMENT: 'global:trade_agreement',\n  INTERNATIONAL_CRISIS: 'global:international_crisis',\n  GLOBAL_EVENT: 'global:event',\n\n  // Scandal events\n  SCANDAL_EMERGE: 'scandal:emerge',\n  SCANDAL_ESCALATE: 'scandal:escalate',\n  SCANDAL_RESOLVE: 'scandal:resolve',\n  MEDIA_ATTENTION: 'scandal:media_attention',\n\n  // UI events\n  UI_UPDATE: 'ui:update',\n  UI_NOTIFICATION: 'ui:notification',\n  UI_ERROR: 'ui:error',\n};\n\n// Create and export global event system instance\nexport const eventSystem = new EventSystem();\n","/**\n * SaveSystem - Game save/load functionality using localStorage with compression\n * Handles game state persistence and recovery\n */\nexport class SaveSystem {\n  constructor() {\n    this.storageKey = 'sp_sim_saves';\n    this.autoSaveKey = 'sp_sim_autosave';\n    this.maxSaves = 10;\n    this.compressionEnabled = true;\n  }\n\n  /**\n   * Save game state\n   * @param {Object} gameState - Complete game state object\n   * @param {string} saveName - Optional name for the save file\n   * @returns {boolean} Success status\n   */\n  saveGame(gameState, saveName = null) {\n    try {\n      const saveData = this.prepareSaveData(gameState, saveName);\n      const saves = this.getAllSaves();\n\n      // Add new save\n      saves.unshift(saveData);\n\n      // Limit number of saves\n      if (saves.length > this.maxSaves) {\n        saves.splice(this.maxSaves);\n      }\n\n      // Store updated saves list\n      localStorage.setItem(this.storageKey, JSON.stringify(saves));\n\n      console.log(`Game saved successfully: ${saveData.name}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to save game:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Load game state\n   * @param {string} saveId - ID of the save to load\n   * @returns {Object|null} Game state or null if failed\n   */\n  loadGame(saveId) {\n    try {\n      const saves = this.getAllSaves();\n      const saveData = saves.find((save) => save.id === saveId);\n\n      if (!saveData) {\n        console.error(`Save not found: ${saveId}`);\n        return null;\n      }\n\n      const gameState = this.decompressData(saveData.data);\n      console.log(`Game loaded successfully: ${saveData.name}`);\n      return gameState;\n    } catch (error) {\n      console.error('Failed to load game:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Auto-save game state (overwrites previous auto-save)\n   * @param {Object} gameState - Complete game state object\n   * @returns {boolean} Success status\n   */\n  autoSave(gameState) {\n    try {\n      const saveData = this.prepareSaveData(gameState, 'Auto Save');\n      localStorage.setItem(this.autoSaveKey, JSON.stringify(saveData));\n      return true;\n    } catch (error) {\n      console.error('Auto-save failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Load auto-save\n   * @returns {Object|null} Game state or null if no auto-save exists\n   */\n  loadAutoSave() {\n    try {\n      const autoSaveData = localStorage.getItem(this.autoSaveKey);\n      if (!autoSaveData) return null;\n\n      const saveData = JSON.parse(autoSaveData);\n      return this.decompressData(saveData.data);\n    } catch (error) {\n      console.error('Failed to load auto-save:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get all saved games\n   * @returns {Array} Array of save metadata\n   */\n  getAllSaves() {\n    try {\n      const saves = localStorage.getItem(this.storageKey);\n      return saves ? JSON.parse(saves) : [];\n    } catch (error) {\n      console.error('Failed to retrieve saves:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete a specific save\n   * @param {string} saveId - ID of save to delete\n   * @returns {boolean} Success status\n   */\n  deleteSave(saveId) {\n    try {\n      const saves = this.getAllSaves();\n      const filteredSaves = saves.filter((save) => save.id !== saveId);\n\n      localStorage.setItem(this.storageKey, JSON.stringify(filteredSaves));\n      console.log(`Save deleted: ${saveId}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to delete save:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all saves\n   * @returns {boolean} Success status\n   */\n  clearAllSaves() {\n    try {\n      localStorage.removeItem(this.storageKey);\n      localStorage.removeItem(this.autoSaveKey);\n      console.log('All saves cleared');\n      return true;\n    } catch (error) {\n      console.error('Failed to clear saves:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Export save data as downloadable file\n   * @param {string} saveId - ID of save to export\n   * @returns {boolean} Success status\n   */\n  exportSave(saveId) {\n    try {\n      const saves = this.getAllSaves();\n      const saveData = saves.find((save) => save.id === saveId);\n\n      if (!saveData) {\n        console.error(`Save not found for export: ${saveId}`);\n        return false;\n      }\n\n      const dataStr = JSON.stringify(saveData, null, 2);\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\n\n      const url = URL.createObjectURL(dataBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `sp_sim_save_${saveData.name.replace(/\\s+/g, '_')}.json`;\n\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      URL.revokeObjectURL(url);\n      return true;\n    } catch (error) {\n      console.error('Failed to export save:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Import save data from file\n   * @param {File} file - Save file to import\n   * @returns {Promise<boolean>} Success status\n   */\n  async importSave(file) {\n    try {\n      const text = await file.text();\n      const saveData = JSON.parse(text);\n\n      // Validate save data structure\n      if (!this.validateSaveData(saveData)) {\n        console.error('Invalid save file format');\n        return false;\n      }\n\n      // Generate new ID to avoid conflicts\n      saveData.id = this.generateSaveId();\n      saveData.imported = true;\n\n      const saves = this.getAllSaves();\n      saves.unshift(saveData);\n\n      localStorage.setItem(this.storageKey, JSON.stringify(saves));\n      console.log(`Save imported successfully: ${saveData.name}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to import save:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get storage usage statistics\n   * @returns {Object} Storage usage information\n   */\n  getStorageStats() {\n    try {\n      const saves = this.getAllSaves();\n      const autoSave = localStorage.getItem(this.autoSaveKey);\n\n      const savesSize = new Blob([localStorage.getItem(this.storageKey) || '']).size;\n      const autoSaveSize = new Blob([autoSave || '']).size;\n      const totalSize = savesSize + autoSaveSize;\n\n      return {\n        saveCount: saves.length,\n        totalSizeBytes: totalSize,\n        totalSizeKB: Math.round(totalSize / 1024),\n        hasAutoSave: !!autoSave,\n        maxSaves: this.maxSaves,\n      };\n    } catch (error) {\n      console.error('Failed to get storage stats:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Prepare save data with metadata\n   * @private\n   */\n  prepareSaveData(gameState, saveName) {\n    const now = new Date();\n    const name = saveName || `Save ${now.toLocaleDateString()} ${now.toLocaleTimeString()}`;\n\n    return {\n      id: this.generateSaveId(),\n      name,\n      timestamp: now.toISOString(),\n      version: gameState.version || '1.0.0',\n      gameTime: gameState.time || {},\n      data: this.compressData(gameState),\n    };\n  }\n\n  /**\n   * Generate unique save ID\n   * @private\n   */\n  generateSaveId() {\n    return `save_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Compress game state data\n   * @private\n   */\n  compressData(data) {\n    if (!this.compressionEnabled) return data;\n\n    try {\n      // Simple JSON compression by removing whitespace\n      // In a production environment, you might want to use a proper compression library\n      return JSON.stringify(data);\n    } catch (error) {\n      console.error('Compression failed:', error);\n      return data;\n    }\n  }\n\n  /**\n   * Decompress game state data\n   * @private\n   */\n  decompressData(data) {\n    if (!this.compressionEnabled) return data;\n\n    try {\n      return typeof data === 'string' ? JSON.parse(data) : data;\n    } catch (error) {\n      console.error('Decompression failed:', error);\n      return data;\n    }\n  }\n\n  /**\n   * Validate save data structure\n   * @private\n   */\n  validateSaveData(saveData) {\n    return (\n      saveData\n      && typeof saveData === 'object'\n      && saveData.id\n      && saveData.name\n      && saveData.timestamp\n      && saveData.data\n    );\n  }\n}\n\n// Create and export global save system instance\nexport const saveSystem = new SaveSystem();\n","import { eventSystem, EVENTS } from './EventSystem';\n\n/**\n * EconomicSimulation - Models economic metrics and their interactions\n * Implements GDP, unemployment, inflation, and economic cycles\n */\nexport class EconomicSimulation {\n  constructor() {\n    this.metrics = {\n      gdp: 1000000000000, // $1 trillion baseline\n      gdpGrowth: 2.1,\n      unemployment: 6.0,\n      inflation: 2.4,\n      interestRate: 3.5,\n      consumerSpending: 0.65, // 65% of GDP\n      governmentSpending: 0.20, // 20% of GDP\n      investment: 0.18, // 18% of GDP\n      netExports: -0.03, // -3% of GDP (trade deficit)\n      productivity: 1.0, // Baseline productivity index\n      confidence: 75, // Consumer/business confidence (0-100)\n    };\n\n    this.sectors = {\n      agriculture: { share: 0.05, growth: 1.2, volatility: 0.15 },\n      manufacturing: { share: 0.25, growth: 2.8, volatility: 0.10 },\n      services: { share: 0.70, growth: 2.0, volatility: 0.05 },\n    };\n\n    this.cycle = {\n      phase: 'expansion', // recession, trough, expansion, peak\n      duration: 0, // weeks in current phase\n      intensity: 0.5, // 0-1 scale\n    };\n\n    this.shocks = [];\n    this.policies = [];\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Setup event listeners\n   */\n  setupEventListeners() {\n    eventSystem.on(EVENTS.TURN_END, () => {\n      this.updateEconomy();\n    });\n\n    eventSystem.on('policy:implemented', (event) => {\n      this.applyPolicy(event.data.policy);\n    });\n\n    eventSystem.on('economic:shock', (event) => {\n      this.applyShock(event.data.shock);\n    });\n  }\n\n  /**\n   * Update economic metrics each turn\n   */\n  updateEconomy() {\n    // Update business cycle\n    this.updateBusinessCycle();\n\n    // Calculate sector performance\n    this.updateSectors();\n\n    // Update core metrics\n    this.updateGDP();\n    this.updateUnemployment();\n    this.updateInflation();\n    this.updateConfidence();\n\n    // Apply any active policies\n    this.applyActivePolicies();\n\n    // Check for automatic events\n    this.checkEconomicEvents();\n\n    // Emit economic update event\n    eventSystem.emit('economic:update', {\n      metrics: { ...this.metrics },\n      sectors: { ...this.sectors },\n      cycle: { ...this.cycle },\n    });\n  }\n\n  /**\n   * Update business cycle\n   */\n  updateBusinessCycle() {\n    this.cycle.duration += 1;\n\n    // Business cycle transitions based on duration and economic conditions\n    switch (this.cycle.phase) {\n      case 'expansion':\n        if (this.cycle.duration > 104 || this.metrics.inflation > 4.5) { // 2 years or high inflation\n          this.cycle.phase = 'peak';\n          this.cycle.duration = 0;\n          this.cycle.intensity = Math.min(1.0, this.cycle.intensity + 0.1);\n        } else {\n          this.cycle.intensity = Math.min(1.0, this.cycle.intensity + 0.02);\n        }\n        break;\n\n      case 'peak':\n        if (this.cycle.duration > 8 || this.metrics.unemployment > 7.5) { // 2 months or high unemployment\n          this.cycle.phase = 'recession';\n          this.cycle.duration = 0;\n          this.cycle.intensity = Math.max(0.1, this.cycle.intensity - 0.1);\n        }\n        break;\n\n      case 'recession':\n        if (this.cycle.duration > 52 || this.metrics.gdpGrowth > 0) { // 1 year or positive growth\n          this.cycle.phase = 'trough';\n          this.cycle.duration = 0;\n          this.cycle.intensity = Math.max(0.1, this.cycle.intensity - 0.02);\n        } else {\n          this.cycle.intensity = Math.max(0.1, this.cycle.intensity - 0.03);\n        }\n        break;\n\n      case 'trough':\n        if (this.cycle.duration > 12 || this.metrics.confidence > 60) { // 3 months or improving confidence\n          this.cycle.phase = 'expansion';\n          this.cycle.duration = 0;\n          this.cycle.intensity = Math.min(1.0, this.cycle.intensity + 0.05);\n        }\n        break;\n\n      default:\n        // Unknown phase, default to expansion\n        this.cycle.phase = 'expansion';\n        this.cycle.duration = 0;\n        break;\n    }\n  }\n\n  /**\n   * Update sector performance\n   */\n  updateSectors() {\n    Object.keys(this.sectors).forEach((sectorName) => {\n      const sector = this.sectors[sectorName];\n\n      // Base growth with cycle effects\n      let { growth } = sector;\n\n      // Apply business cycle effects\n      const cycleEffect = this.getCycleEffect();\n      growth *= cycleEffect;\n\n      // Add volatility\n      const volatility = (Math.random() - 0.5) * sector.volatility * 2;\n      growth += volatility;\n\n      // Update sector metrics\n      sector.currentGrowth = growth;\n      sector.cycleEffect = cycleEffect;\n    });\n  }\n\n  /**\n   * Update GDP and GDP growth\n   */\n  updateGDP() {\n    // Calculate weighted sector growth\n    let weightedGrowth = 0;\n    Object.keys(this.sectors).forEach((sectorName) => {\n      const sector = this.sectors[sectorName];\n      weightedGrowth += sector.share * (sector.currentGrowth || sector.growth);\n    });\n\n    // Apply productivity effects\n    const productivityEffect = (this.metrics.productivity - 1.0) * 0.5;\n    weightedGrowth += productivityEffect;\n\n    // Apply confidence effects\n    const confidenceEffect = (this.metrics.confidence - 50) / 100;\n    weightedGrowth += confidenceEffect;\n\n    // Update GDP growth (annualized from quarterly)\n    this.metrics.gdpGrowth = this.smoothUpdate(this.metrics.gdpGrowth, weightedGrowth, 0.3);\n\n    // Update actual GDP\n    const weeklyGrowthRate = this.metrics.gdpGrowth / 52 / 100;\n    this.metrics.gdp *= (1 + weeklyGrowthRate);\n  }\n\n  /**\n   * Update unemployment rate\n   */\n  updateUnemployment() {\n    // Okun's Law: unemployment inversely related to GDP growth\n    const targetUnemployment = 6.0 - (this.metrics.gdpGrowth - 2.0) * 0.4;\n\n    // Business cycle effects\n    let cycleAdjustment = 0;\n    switch (this.cycle.phase) {\n      case 'recession':\n        cycleAdjustment = 0.5;\n        break;\n      case 'trough':\n        cycleAdjustment = 0.2;\n        break;\n      case 'expansion':\n        cycleAdjustment = -0.3;\n        break;\n      case 'peak':\n        cycleAdjustment = -0.1;\n        break;\n      default:\n        cycleAdjustment = 0;\n        break;\n    }\n\n    const adjustedTarget = Math.max(3.0, Math.min(12.0, targetUnemployment + cycleAdjustment));\n    this.metrics.unemployment = this.smoothUpdate(this.metrics.unemployment, adjustedTarget, 0.2);\n  }\n\n  /**\n   * Update inflation rate\n   */\n  updateInflation() {\n    // Phillips Curve: inverse relationship with unemployment\n    const demandPullInflation = Math.max(0, (7.0 - this.metrics.unemployment) * 0.3);\n\n    // Cost-push inflation from business cycle\n    const costPushInflation = this.cycle.intensity * 0.8;\n\n    // Money supply effects (simplified)\n    const monetaryInflation = (this.metrics.interestRate < 2.0) ? 0.5 : -0.2;\n\n    const targetInflation = 2.0 + demandPullInflation + costPushInflation + monetaryInflation;\n\n    // Add some volatility\n    const volatility = (Math.random() - 0.5) * 0.4;\n    const adjustedTarget = Math.max(0, targetInflation + volatility);\n\n    this.metrics.inflation = this.smoothUpdate(this.metrics.inflation, adjustedTarget, 0.25);\n  }\n\n  /**\n   * Update consumer and business confidence\n   */\n  updateConfidence() {\n    let confidenceChange = 0;\n\n    // Economic performance effects\n    if (this.metrics.gdpGrowth > 3.0) confidenceChange += 2;\n    else if (this.metrics.gdpGrowth < 0) confidenceChange -= 3;\n\n    if (this.metrics.unemployment < 5.0) confidenceChange += 1;\n    else if (this.metrics.unemployment > 8.0) confidenceChange -= 2;\n\n    if (this.metrics.inflation > 4.0) confidenceChange -= 2;\n    else if (this.metrics.inflation < 1.0) confidenceChange -= 1;\n\n    // Business cycle effects\n    switch (this.cycle.phase) {\n      case 'expansion':\n        confidenceChange += 1;\n        break;\n      case 'recession':\n        confidenceChange -= 2;\n        break;\n      case 'trough':\n        confidenceChange += 0.5; // Recovery hope\n        break;\n      default:\n        break;\n    }\n\n    // Random events\n    confidenceChange += (Math.random() - 0.5) * 2;\n\n    this.metrics.confidence = Math.max(0, Math.min(100, this.metrics.confidence + confidenceChange));\n  }\n\n  /**\n   * Apply economic policy\n   */\n  applyPolicy(policy) {\n    this.policies.push({\n      ...policy,\n      duration: policy.duration || 12, // weeks\n      implementedWeek: 0,\n    });\n\n    // Immediate effects\n    switch (policy.type) {\n      case 'fiscal_stimulus':\n        this.metrics.confidence += 5;\n        this.metrics.governmentSpending += policy.amount || 0.02;\n        break;\n      case 'tax_cut':\n        this.metrics.confidence += 3;\n        this.metrics.consumerSpending += policy.amount || 0.01;\n        break;\n      case 'tax_increase':\n        this.metrics.confidence -= 4;\n        this.metrics.consumerSpending -= policy.amount || 0.015;\n        break;\n      case 'interest_rate_change':\n        this.metrics.interestRate += policy.change || 0;\n        break;\n      case 'infrastructure_investment':\n        this.metrics.productivity += policy.amount || 0.05;\n        this.sectors.manufacturing.growth += policy.amount || 0.5;\n        break;\n      case 'education_investment':\n        this.metrics.productivity += policy.amount || 0.03;\n        this.sectors.services.growth += policy.amount || 0.3;\n        break;\n      case 'healthcare_investment':\n        this.metrics.productivity += policy.amount || 0.02;\n        this.metrics.confidence += 3;\n        break;\n      case 'green_energy_investment':\n        this.sectors.manufacturing.growth += policy.amount || 0.4;\n        this.metrics.productivity += policy.amount || 0.04;\n        break;\n      case 'trade_promotion':\n        this.metrics.netExports += policy.amount || 0.01;\n        this.sectors.manufacturing.growth += policy.amount || 0.3;\n        break;\n      case 'regulation_increase':\n        this.sectors.services.growth -= policy.amount || 0.2;\n        this.metrics.confidence -= 2;\n        break;\n      case 'regulation_decrease':\n        this.sectors.services.growth += policy.amount || 0.3;\n        this.metrics.confidence += 2;\n        break;\n      case 'agricultural_subsidies':\n        this.sectors.agriculture.growth += policy.amount || 0.5;\n        this.metrics.governmentSpending += policy.amount || 0.005;\n        break;\n      case 'minimum_wage_increase':\n        this.metrics.consumerSpending += policy.amount || 0.008;\n        this.metrics.confidence += 2;\n        this.metrics.inflation += policy.amount || 0.3;\n        break;\n      default:\n        break;\n    }\n\n    eventSystem.emit('economic:policy_applied', {\n      policy,\n      newMetrics: { ...this.metrics },\n    });\n  }\n\n  /**\n   * Apply active policies each turn\n   */\n  applyActivePolicies() {\n    this.policies = this.policies.filter((policy) => {\n      policy.implementedWeek += 1;\n\n      // Apply ongoing effects\n      if (policy.ongoingEffects) {\n        Object.keys(policy.ongoingEffects).forEach((metric) => {\n          if (this.metrics[metric] !== undefined) {\n            this.metrics[metric] += policy.ongoingEffects[metric];\n          }\n        });\n      }\n\n      // Remove expired policies\n      return policy.implementedWeek < policy.duration;\n    });\n  }\n\n  /**\n   * Apply economic shock\n   */\n  applyShock(shock) {\n    this.shocks.push(shock);\n\n    switch (shock.type) {\n      case 'oil_price_spike':\n        this.metrics.inflation += shock.magnitude || 1.0;\n        this.metrics.confidence -= shock.magnitude * 5 || 10;\n        break;\n      case 'financial_crisis':\n        this.metrics.confidence -= shock.magnitude * 20 || 30;\n        this.cycle.phase = 'recession';\n        this.cycle.duration = 0;\n        break;\n      case 'trade_war':\n        this.metrics.netExports -= shock.magnitude || 0.02;\n        this.sectors.manufacturing.growth -= shock.magnitude || 1.0;\n        break;\n      case 'pandemic':\n        this.metrics.gdpGrowth -= shock.magnitude || 5.0;\n        this.metrics.unemployment += shock.magnitude || 3.0;\n        this.sectors.services.growth -= shock.magnitude || 3.0;\n        break;\n      case 'supply_chain_disruption':\n        this.sectors.manufacturing.growth -= shock.magnitude;\n        this.sectors.services.growth -= shock.magnitude * 0.5;\n        this.metrics.inflation += shock.magnitude * 0.3;\n        break;\n      case 'commodity_price_spike':\n        this.metrics.inflation += shock.magnitude;\n        this.sectors.agriculture.growth -= shock.magnitude * 0.8;\n        this.metrics.confidence -= shock.magnitude * 3;\n        break;\n      case 'currency_fluctuation':\n        this.metrics.netExports += (Math.random() - 0.5) * shock.magnitude * 0.02;\n        this.metrics.inflation += shock.magnitude * 0.2;\n        break;\n      case 'tech_innovation':\n        this.metrics.productivity += shock.magnitude * 0.1;\n        this.sectors.services.growth += shock.magnitude;\n        this.metrics.confidence += shock.magnitude * 5;\n        break;\n      case 'natural_disaster':\n        this.metrics.gdpGrowth -= shock.magnitude;\n        this.sectors.agriculture.growth -= shock.magnitude * 1.5;\n        this.metrics.confidence -= shock.magnitude * 8;\n        break;\n      case 'geopolitical_tension':\n        this.metrics.confidence -= shock.magnitude * 6;\n        this.metrics.netExports -= shock.magnitude * 0.01;\n        this.metrics.investment -= shock.magnitude * 0.01;\n        break;\n      default:\n        break;\n    }\n\n    eventSystem.emit('economic:shock_applied', {\n      shock,\n      newMetrics: { ...this.metrics },\n    });\n  }\n\n  /**\n   * Check for automatic economic events\n   */\n  checkEconomicEvents() {\n    const events = [];\n\n    // High inflation warning\n    if (this.metrics.inflation > 4.0 && Math.random() < 0.1) {\n      events.push({\n        type: 'high_inflation_warning',\n        message: `Inflation has reached ${this.metrics.inflation.toFixed(1)}%. Consider monetary policy adjustments.`,\n        severity: 'warning',\n      });\n    }\n\n    // Recession warning\n    if (this.metrics.gdpGrowth < -1.0 && this.cycle.phase !== 'recession') {\n      events.push({\n        type: 'recession_warning',\n        message: 'Economic indicators suggest a recession. GDP growth is negative.',\n        severity: 'danger',\n      });\n    }\n\n    // Low unemployment celebration\n    if (this.metrics.unemployment < 4.0 && Math.random() < 0.05) {\n      events.push({\n        type: 'low_unemployment',\n        message: `Unemployment has dropped to ${this.metrics.unemployment.toFixed(1)}%. Conditions are favorable.`,\n        severity: 'success',\n      });\n    }\n\n    // Economic boom detection\n    if (this.metrics.gdpGrowth > 4.0 && this.metrics.unemployment < 5.0 && Math.random() < 0.08) {\n      events.push({\n        type: 'economic_boom',\n        message: `Economic boom detected! GDP growth at ${this.metrics.gdpGrowth.toFixed(1)}% with low unemployment.`,\n        severity: 'success',\n      });\n    }\n\n    // Deflation warning\n    if (this.metrics.inflation < 0.5 && Math.random() < 0.06) {\n      events.push({\n        type: 'deflation_risk',\n        message: `Deflation risk: Inflation is only ${this.metrics.inflation.toFixed(1)}%. Consider stimulus measures.`,\n        severity: 'warning',\n      });\n    }\n\n    // Stagflation detection\n    if (this.metrics.inflation > 3.5 && this.metrics.unemployment > 7.0\n        && this.metrics.gdpGrowth < 1.0 && Math.random() < 0.1) {\n      events.push({\n        type: 'stagflation',\n        message: 'Stagflation detected: High inflation and unemployment with low growth. '\n          + 'Difficult policy choices ahead.',\n        severity: 'danger',\n      });\n    }\n\n    // Interest rate milestones\n    if (this.metrics.interestRate <= 0.5 && Math.random() < 0.05) {\n      events.push({\n        type: 'zero_interest_rate',\n        message: 'Interest rates near zero. Traditional monetary policy effectiveness limited.',\n        severity: 'warning',\n      });\n    }\n\n    // Sector-specific events\n    Object.keys(this.sectors).forEach((sectorName) => {\n      const sector = this.sectors[sectorName];\n\n      // Sector boom\n      if (sector.currentGrowth > 5.0 && Math.random() < 0.04) {\n        events.push({\n          type: 'sector_boom',\n          message: `${sectorName.charAt(0).toUpperCase() + sectorName.slice(1)} sector `\n            + `experiencing rapid growth at ${sector.currentGrowth.toFixed(1)}%.`,\n          severity: 'success',\n        });\n      }\n\n      // Sector decline\n      if (sector.currentGrowth < -2.0 && Math.random() < 0.06) {\n        events.push({\n          type: 'sector_decline',\n          message: `${sectorName.charAt(0).toUpperCase() + sectorName.slice(1)} sector `\n            + `declining at ${sector.currentGrowth.toFixed(1)}%. May need targeted support.`,\n          severity: 'warning',\n        });\n      }\n    });\n\n    // Random economic shocks (Week 8 feature)\n    if (Math.random() < 0.02) { // 2% chance per week\n      const shockType = this.generateRandomShock();\n      if (shockType) {\n        events.push(shockType);\n        this.applyShock(shockType);\n      }\n    }\n\n    // Confidence milestones\n    if (this.metrics.confidence > 85 && Math.random() < 0.03) {\n      events.push({\n        type: 'high_confidence',\n        message: `Consumer confidence at ${this.metrics.confidence.toFixed(0)}%. `\n          + 'Strong economic sentiment boosting spending.',\n        severity: 'success',\n      });\n    }\n\n    if (this.metrics.confidence < 30 && Math.random() < 0.05) {\n      events.push({\n        type: 'confidence_crisis',\n        message: `Consumer confidence plummeted to ${this.metrics.confidence.toFixed(0)}%. `\n          + 'Economic uncertainty affecting all sectors.',\n        severity: 'danger',\n      });\n    }\n\n    // Emit events\n    events.forEach((event) => {\n      eventSystem.emit('economic:event', event);\n    });\n  }\n\n  /**\n   * Generate random economic shock (Week 8 feature)\n   */\n  generateRandomShock() {\n    const shocks = [\n      {\n        type: 'supply_chain_disruption',\n        message: 'Global supply chain disruption affecting manufacturing and services.',\n        severity: 'warning',\n        magnitude: 0.5 + Math.random() * 1.0,\n      },\n      {\n        type: 'commodity_price_spike',\n        message: 'Commodity prices surge affecting production costs and inflation.',\n        severity: 'warning',\n        magnitude: 0.3 + Math.random() * 0.7,\n      },\n      {\n        type: 'currency_fluctuation',\n        message: 'Major currency fluctuation impacting trade balance and imports.',\n        severity: 'info',\n        magnitude: 0.2 + Math.random() * 0.5,\n      },\n      {\n        type: 'tech_innovation',\n        message: 'Technological breakthrough boosting productivity in key sectors.',\n        severity: 'success',\n        magnitude: 0.3 + Math.random() * 0.4,\n      },\n      {\n        type: 'natural_disaster',\n        message: 'Natural disaster affecting regional economic activity.',\n        severity: 'danger',\n        magnitude: 0.4 + Math.random() * 0.8,\n      },\n      {\n        type: 'geopolitical_tension',\n        message: 'Geopolitical tensions affecting trade and investor confidence.',\n        severity: 'warning',\n        magnitude: 0.3 + Math.random() * 0.6,\n      },\n    ];\n\n    return shocks[Math.floor(Math.random() * shocks.length)];\n  }\n\n  /**\n   * Get business cycle effect multiplier\n   */\n  getCycleEffect() {\n    switch (this.cycle.phase) {\n      case 'expansion':\n        return 1.0 + (this.cycle.intensity * 0.2);\n      case 'peak':\n        return 1.1;\n      case 'recession':\n        return 0.8 - (this.cycle.intensity * 0.3);\n      case 'trough':\n        return 0.7;\n      default:\n        return 1.0;\n    }\n  }\n\n  /**\n   * Smooth update utility for gradual changes\n   */\n  smoothUpdate(current, target, speed) {\n    return current + (target - current) * speed;\n  }\n\n  /**\n   * Get current economic state\n   */\n  getEconomicState() {\n    return {\n      metrics: { ...this.metrics },\n      sectors: { ...this.sectors },\n      cycle: { ...this.cycle },\n      activePolicies: this.policies.length,\n      activeShocks: this.shocks.length,\n    };\n  }\n\n  /**\n   * Get economic forecast\n   */\n  getForecast(weeksAhead = 12) {\n    // Simple linear projection based on current trends\n    const forecast = {\n      gdpGrowth: [],\n      unemployment: [],\n      inflation: [],\n    };\n\n    let currentGDP = this.metrics.gdpGrowth;\n    let currentUnemployment = this.metrics.unemployment;\n    let currentInflation = this.metrics.inflation;\n\n    for (let week = 1; week <= weeksAhead; week += 1) {\n      // Simple trend continuation with some mean reversion\n      currentGDP = this.smoothUpdate(currentGDP, 2.1, 0.05); // Mean revert to 2.1%\n      currentUnemployment = this.smoothUpdate(currentUnemployment, 6.0, 0.03); // Mean revert to 6%\n      currentInflation = this.smoothUpdate(currentInflation, 2.0, 0.04); // Mean revert to 2%\n\n      forecast.gdpGrowth.push(Number(currentGDP.toFixed(2)));\n      forecast.unemployment.push(Number(currentUnemployment.toFixed(1)));\n      forecast.inflation.push(Number(currentInflation.toFixed(1)));\n    }\n\n    return forecast;\n  }\n}\n\n// Create and export global economic simulation instance\nexport const economicSimulation = new EconomicSimulation();\n","import { EVENTS, eventSystem } from './EventSystem';\nimport { saveSystem } from './SaveSystem';\nimport { economicSimulation } from './EconomicSimulation';\n\n/**\n * GameEngine - Core game loop and state management for SP_Sim\n * Orchestrates all game systems and handles the main game loop\n */\nexport class GameEngine {\n  constructor() {\n    this.eventSystem = eventSystem;\n    this.saveSystem = saveSystem;\n    this.economicSimulation = economicSimulation;\n\n    // Game state\n    this.gameState = this.createInitialGameState();\n    this.isRunning = false;\n    this.isPaused = false;\n    this.gameSpeed = 1000; // milliseconds per turn\n    this.lastUpdateTime = 0;\n    this.gameLoopId = null;\n\n    // Performance tracking\n    this.frameCount = 0;\n    this.lastFrameTime = Date.now();\n    this.fps = 0;\n\n    this.initializeEventListeners();\n  }\n\n  /**\n   * Initialize the game\n   */\n  initialize() {\n    console.log('Initializing SP_Sim Game Engine...');\n\n    // Try to load auto-save\n    const autoSave = this.saveSystem.loadAutoSave();\n    if (autoSave) {\n      this.gameState = autoSave;\n      console.log('Auto-save loaded');\n    }\n\n    this.eventSystem.emit(EVENTS.GAME_START, { gameState: this.gameState });\n    console.log('Game Engine initialized successfully');\n  }\n\n  /**\n   * Start the game loop\n   */\n  start() {\n    if (this.isRunning) return;\n\n    this.isRunning = true;\n    this.isPaused = false;\n    this.lastUpdateTime = Date.now();\n\n    this.gameLoop();\n    this.eventSystem.emit(EVENTS.GAME_RESUME, { gameState: this.gameState });\n    console.log('Game started');\n  }\n\n  /**\n   * Pause the game\n   */\n  pause() {\n    if (!this.isRunning || this.isPaused) return;\n\n    this.isPaused = true;\n    if (this.gameLoopId) {\n      clearTimeout(this.gameLoopId);\n      this.gameLoopId = null;\n    }\n\n    this.eventSystem.emit(EVENTS.GAME_PAUSE, { gameState: this.gameState });\n    console.log('Game paused');\n  }\n\n  /**\n   * Resume the game\n   */\n  resume() {\n    if (!this.isRunning || !this.isPaused) return;\n\n    this.isPaused = false;\n    this.lastUpdateTime = Date.now();\n    this.gameLoop();\n\n    this.eventSystem.emit(EVENTS.GAME_RESUME, { gameState: this.gameState });\n    console.log('Game resumed');\n  }\n\n  /**\n   * Stop the game\n   */\n  stop() {\n    this.isRunning = false;\n    this.isPaused = false;\n\n    if (this.gameLoopId) {\n      clearTimeout(this.gameLoopId);\n      this.gameLoopId = null;\n    }\n\n    // Auto-save when stopping\n    this.autoSave();\n    console.log('Game stopped');\n  }\n\n  /**\n   * Advance to next turn manually\n   */\n  nextTurn() {\n    if (!this.isRunning) return;\n\n    this.processTurn();\n  }\n\n  /**\n   * Main game loop\n   */\n  gameLoop() {\n    if (!this.isRunning || this.isPaused) return;\n\n    const now = Date.now();\n    const deltaTime = now - this.lastUpdateTime;\n\n    // Update FPS counter\n    this.updateFPS(now);\n\n    // Process turn if enough time has passed\n    if (deltaTime >= this.gameSpeed) {\n      this.processTurn();\n      this.lastUpdateTime = now;\n    }\n\n    // Schedule next frame\n    this.gameLoopId = setTimeout(() => this.gameLoop(), 16); // ~60 FPS\n  }\n\n  /**\n   * Process a single turn\n   */\n  processTurn() {\n    this.eventSystem.emit(EVENTS.TURN_START, {\n      gameState: this.gameState,\n      turn: this.gameState.time.week,\n    });\n\n    // Advance time\n    this.advanceTime();\n\n    // Process queued events\n    this.eventSystem.processQueue();\n\n    // Auto-save periodically\n    if (this.gameState.time.week % 4 === 0) { // Every 4 weeks\n      this.autoSave();\n    }\n\n    this.eventSystem.emit(EVENTS.TURN_END, {\n      gameState: this.gameState,\n      turn: this.gameState.time.week,\n    });\n  }\n\n  /**\n   * Advance game time\n   */\n  advanceTime() {\n    this.gameState.time.week += 1;\n\n    // Handle month/year transitions\n    if (this.gameState.time.week > 52) {\n      this.gameState.time.week = 1;\n      this.gameState.time.year += 1;\n    }\n\n    // Calculate current date\n    const startDate = new Date(this.gameState.time.startDate);\n    const weeksElapsed = (this.gameState.time.year - 1) * 52 + this.gameState.time.week - 1;\n    this.gameState.time.currentDate = new Date(startDate.getTime() + weeksElapsed * 7 * 24 * 60 * 60 * 1000);\n  }\n\n  /**\n   * Save game manually\n   */\n  saveGame(saveName = null) {\n    const success = this.saveSystem.saveGame(this.gameState, saveName);\n    this.eventSystem.emit(EVENTS.GAME_SAVE, {\n      success,\n      gameState: this.gameState,\n      saveName,\n    });\n    return success;\n  }\n\n  /**\n   * Load game\n   */\n  loadGame(saveId) {\n    const loadedState = this.saveSystem.loadGame(saveId);\n    if (loadedState) {\n      this.gameState = loadedState;\n      this.eventSystem.emit(EVENTS.GAME_LOAD, {\n        success: true,\n        gameState: this.gameState,\n      });\n      return true;\n    }\n\n    this.eventSystem.emit(EVENTS.GAME_LOAD, {\n      success: false,\n      saveId,\n    });\n    return false;\n  }\n\n  /**\n   * Auto-save game\n   */\n  autoSave() {\n    return this.saveSystem.autoSave(this.gameState);\n  }\n\n  /**\n   * Update game state\n   */\n  updateGameState(updates) {\n    // Deep merge updates into game state\n    this.gameState = this.mergeDeep(this.gameState, updates);\n\n    this.eventSystem.emit(EVENTS.UI_UPDATE, {\n      gameState: this.gameState,\n      updates,\n    });\n  }\n\n  /**\n   * Get current game state (read-only copy)\n   */\n  getGameState() {\n    return JSON.parse(JSON.stringify(this.gameState));\n  }\n\n  /**\n   * Get game statistics\n   */\n  getGameStats() {\n    return {\n      isRunning: this.isRunning,\n      isPaused: this.isPaused,\n      gameSpeed: this.gameSpeed,\n      fps: this.fps,\n      currentTurn: this.gameState.time.week,\n      currentYear: this.gameState.time.year,\n      playtime: this.calculatePlaytime(),\n      eventSystemStats: this.eventSystem.getStats(),\n      storageStats: this.saveSystem.getStorageStats(),\n    };\n  }\n\n  /**\n   * Set game speed\n   */\n  setGameSpeed(speed) {\n    this.gameSpeed = Math.max(100, Math.min(5000, speed)); // Clamp between 100ms and 5s\n    console.log(`Game speed set to ${this.gameSpeed}ms per turn`);\n  }\n\n  /**\n   * Create initial game state\n   * @private\n   */\n  createInitialGameState() {\n    const now = new Date();\n\n    return {\n      version: '1.0.0',\n      player: {\n        name: 'Player',\n        party: 'Independent',\n        experience: 0,\n        skills: {\n          economics: { level: 1, experience: 0 },\n          diplomacy: { level: 1, experience: 0 },\n          communication: { level: 1, experience: 0 },\n          leadership: { level: 1, experience: 0 },\n        },\n      },\n      country: {\n        name: 'Democracia',\n        population: 50000000,\n        gdp: 1000000000000, // $1 trillion\n        debt: 600000000000, // 60% of GDP\n        stability: 75,\n      },\n      economy: {\n        gdpGrowth: 2.1,\n        unemployment: 6.0,\n        inflation: 2.4,\n        interestRate: 3.5,\n        sectors: {\n          agriculture: 5,\n          manufacturing: 25,\n          services: 70,\n        },\n      },\n      politics: {\n        approval: 50,\n        coalition: [\n          { party: 'Government', support: 45 },\n          { party: 'Coalition Partner', support: 22 },\n        ],\n        opposition: [\n          { party: 'Main Opposition', support: 30 },\n          { party: 'Minor Opposition', support: 3 },\n        ],\n        nextElection: { year: 4, week: 1 },\n        nextVote: null,\n      },\n      global: {\n        relations: {\n          'United Federation': 75,\n          'Eastern Empire': 60,\n          'Southern Union': 80,\n        },\n        tradeBalance: 15000000000, // $15 billion surplus\n        internationalStanding: 'Good',\n      },\n      time: {\n        startDate: now.toISOString(),\n        currentDate: now.toISOString(),\n        week: 1,\n        year: 1,\n      },\n      events: {\n        recent: [],\n        pending: [],\n      },\n      scandals: {\n        active: [],\n        resolved: [],\n      },\n    };\n  }\n\n  /**\n   * Initialize event listeners\n   * @private\n   */\n  initializeEventListeners() {\n    // Listen for UI events that affect game state\n    this.eventSystem.on(EVENTS.POLICY_PROPOSED, (event) => {\n      this.gameState.events.pending.push(event.data);\n    });\n\n    this.eventSystem.on(EVENTS.APPROVAL_CHANGE, (event) => {\n      this.gameState.politics.approval = Math.max(0, Math.min(100, event.data.newApproval));\n    });\n\n    // Listen for economic events\n    this.eventSystem.on('economic:update', (event) => {\n      // Update game state with economic data\n      const economicData = event.data;\n      this.gameState.economy = {\n        ...this.gameState.economy,\n        ...economicData.metrics,\n        sectors: economicData.sectors,\n        cycle: economicData.cycle,\n      };\n    });\n\n    this.eventSystem.on('economic:event', (event) => {\n      // Add economic events to game events\n      this.gameState.events.recent.push({\n        type: 'economic',\n        ...event.data,\n        timestamp: Date.now(),\n      });\n\n      // Keep only last 10 events\n      if (this.gameState.events.recent.length > 10) {\n        this.gameState.events.recent = this.gameState.events.recent.slice(-10);\n      }\n    });\n  }\n\n  /**\n   * Update FPS counter\n   * @private\n   */\n  updateFPS(now) {\n    this.frameCount += 1;\n    if (now - this.lastFrameTime >= 1000) {\n      this.fps = this.frameCount;\n      this.frameCount = 0;\n      this.lastFrameTime = now;\n    }\n  }\n\n  /**\n   * Calculate total playtime\n   * @private\n   */\n  calculatePlaytime() {\n    const start = new Date(this.gameState.time.startDate);\n    const current = new Date(this.gameState.time.currentDate);\n    return Math.floor((current - start) / (1000 * 60 * 60 * 24 * 7)); // weeks\n  }\n\n  /**\n   * Deep merge objects\n   * @private\n   */\n  mergeDeep(target, source) {\n    const result = { ...target };\n\n    Object.keys(source).forEach((key) => {\n      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n        result[key] = this.mergeDeep(result[key] || {}, source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n\n    return result;\n  }\n}\n\n// Create and export global game engine instance\nexport const gameEngine = new GameEngine();\n"],"names":[],"mappings":"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"}