{"version":3,"file":"ui-bb_sq3CC.js","sources":["../../src/ui/components/BaseComponent.js","../../src/ui/components/Dashboard.js","../../src/ui/components/Chart.js","../../src/ui/components/EconomicsScreen.js"],"sourcesContent":["/**\n * BaseComponent - Base class for all UI components in SP_Sim\n * Provides common functionality for event handling and DOM manipulation\n */\nexport class BaseComponent {\n  constructor(elementId) {\n    this.element = elementId ? document.getElementById(elementId) : null;\n    this.listeners = [];\n    this.isVisible = true;\n  }\n\n  /**\n   * Add event listener and track it for cleanup\n   */\n  addEventListener(element, event, handler) {\n    const listener = { element, event, handler };\n    element.addEventListener(event, handler);\n    this.listeners.push(listener);\n  }\n\n  /**\n   * Remove all event listeners\n   */\n  removeAllEventListeners() {\n    this.listeners.forEach(({ element, event, handler }) => {\n      element.removeEventListener(event, handler);\n    });\n    this.listeners = [];\n  }\n\n  /**\n   * Show the component\n   */\n  show() {\n    if (this.element) {\n      this.element.classList.remove('hidden');\n      this.isVisible = true;\n    }\n  }\n\n  /**\n   * Hide the component\n   */\n  hide() {\n    if (this.element) {\n      this.element.classList.add('hidden');\n      this.isVisible = false;\n    }\n  }\n\n  /**\n   * Toggle component visibility\n   */\n  toggle() {\n    if (this.isVisible) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /**\n   * Update component content\n   */\n  update(_data) {\n    // To be implemented by subclasses\n    console.warn('update() method not implemented in', this.constructor.name); // eslint-disable-line no-console\n  }\n\n  /**\n   * Destroy the component and clean up\n   */\n  destroy() {\n    this.removeAllEventListeners();\n    if (this.element && this.element.parentNode) {\n      this.element.parentNode.removeChild(this.element);\n    }\n  }\n\n  /**\n   * Set element text content safely\n   */\n  setTextContent(selector, text) {\n    const element = this.element ? this.element.querySelector(selector) : document.querySelector(selector);\n    if (element) {\n      element.textContent = text;\n    }\n  }\n\n  /**\n   * Set element HTML content safely\n   */\n  setHTML(selector, html) {\n    const element = this.element ? this.element.querySelector(selector) : document.querySelector(selector);\n    if (element) {\n      element.innerHTML = html;\n    }\n  }\n\n  /**\n   * Add CSS class to element\n   */\n  addClass(selector, className) {\n    const element = this.element ? this.element.querySelector(selector) : document.querySelector(selector);\n    if (element) {\n      element.classList.add(className);\n    }\n  }\n\n  /**\n   * Remove CSS class from element\n   */\n  removeClass(selector, className) {\n    const element = this.element ? this.element.querySelector(selector) : document.querySelector(selector);\n    if (element) {\n      element.classList.remove(className);\n    }\n  }\n\n  /**\n   * Format number with thousands separators\n   */\n  formatNumber(num, decimals = 0) {\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals,\n    }).format(num);\n  }\n\n  /**\n   * Format percentage\n   */\n  formatPercentage(num, decimals = 1) {\n    return `${this.formatNumber(num, decimals)}%`;\n  }\n\n  /**\n   * Format currency\n   */\n  formatCurrency(num, currency = 'USD') {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(num);\n  }\n\n  /**\n   * Create and append a DOM element\n   */\n  createElement(tag, className = '', content = '') {\n    const element = document.createElement(tag);\n    if (className) element.className = className;\n    if (content) element.textContent = content;\n    return element;\n  }\n}\n","import { BaseComponent } from './BaseComponent';\nimport { eventSystem, EVENTS } from '../../core/EventSystem';\n\n/**\n * Dashboard - Main game interface component\n * Handles display of economic, political, and global indicators\n */\nexport class Dashboard extends BaseComponent {\n  constructor() {\n    super();\n    this.initializeElements();\n    this.setupEventListeners();\n  }\n\n  /**\n   * Initialize dashboard elements\n   */\n  initializeElements() {\n    // Header elements\n    this.gameTimeElement = document.getElementById('game-time');\n    this.approvalRatingElement = document.getElementById('approval-rating');\n    this.nextElectionElement = document.getElementById('next-election');\n\n    // Economic panel elements\n    this.gdpGrowthElement = document.getElementById('gdp-growth');\n    this.unemploymentElement = document.getElementById('unemployment');\n    this.inflationElement = document.getElementById('inflation');\n    this.nationalDebtElement = document.getElementById('national-debt');\n\n    // Political panel elements\n    this.coalitionSupportElement = document.getElementById('coalition-support');\n    this.oppositionElement = document.getElementById('opposition');\n    this.independentsElement = document.getElementById('independents');\n    this.nextVoteElement = document.getElementById('next-vote');\n\n    // Global panel elements\n    this.intlStandingElement = document.getElementById('intl-standing');\n    this.tradeBalanceElement = document.getElementById('trade-balance');\n    this.diplomaticRelationsElement = document.getElementById('diplomatic-relations');\n\n    // Events and decisions\n    this.recentEventsElement = document.getElementById('recent-events');\n    this.pendingDecisionsElement = document.getElementById('pending-decisions');\n\n    // Game controls\n    this.pauseBtn = document.getElementById('pause-btn');\n    this.nextTurnBtn = document.getElementById('next-turn-btn');\n    this.saveBtn = document.getElementById('save-btn');\n    this.loadBtn = document.getElementById('load-btn');\n  }\n\n  /**\n   * Setup event listeners\n   */\n  setupEventListeners() {\n    // Listen for game state updates\n    eventSystem.on(EVENTS.UI_UPDATE, (event) => {\n      this.update(event.data.gameState);\n    });\n\n    eventSystem.on(EVENTS.TURN_END, (event) => {\n      this.update(event.data.gameState);\n    });\n\n    // Game control buttons\n    if (this.pauseBtn) {\n      this.addEventListener(this.pauseBtn, 'click', () => {\n        this.handlePauseToggle();\n      });\n    }\n\n    if (this.nextTurnBtn) {\n      this.addEventListener(this.nextTurnBtn, 'click', () => {\n        eventSystem.emit(EVENTS.GAME_START); // Trigger next turn\n      });\n    }\n\n    if (this.saveBtn) {\n      this.addEventListener(this.saveBtn, 'click', () => {\n        this.handleSaveGame();\n      });\n    }\n\n    if (this.loadBtn) {\n      this.addEventListener(this.loadBtn, 'click', () => {\n        this.handleLoadGame();\n      });\n    }\n  }\n\n  /**\n   * Update dashboard with current game state\n   */\n  update(gameState) {\n    this.updateHeader(gameState);\n    this.updateEconomicPanel(gameState);\n    this.updatePoliticalPanel(gameState);\n    this.updateGlobalPanel(gameState);\n    this.updateEvents(gameState);\n  }\n\n  /**\n   * Update header information\n   */\n  updateHeader(gameState) {\n    if (this.gameTimeElement) {\n      this.gameTimeElement.textContent = `Week ${gameState.time.week}, Year ${gameState.time.year}`;\n    }\n\n    if (this.approvalRatingElement) {\n      const { approval } = gameState.politics;\n      this.approvalRatingElement.textContent = `Approval: ${this.formatPercentage(approval)}`;\n\n      // Add color coding\n      this.approvalRatingElement.className = '';\n      if (approval >= 60) {\n        this.approvalRatingElement.classList.add('text-success');\n      } else if (approval >= 40) {\n        // Default color\n      } else {\n        this.approvalRatingElement.classList.add('text-danger');\n      }\n    }\n\n    if (this.nextElectionElement) {\n      const election = gameState.politics.nextElection;\n      const weeksUntil = (election.year - gameState.time.year) * 52 + (election.week - gameState.time.week);\n      this.nextElectionElement.textContent = `Next Election: ${weeksUntil}w`;\n    }\n  }\n\n  /**\n   * Update economic panel\n   */\n  updateEconomicPanel(gameState) {\n    const { economy } = gameState;\n\n    if (this.gdpGrowthElement) {\n      const growth = economy.gdpGrowth;\n      this.gdpGrowthElement.textContent = `${growth >= 0 ? '+' : ''}${this.formatNumber(growth, 1)}%`;\n      this.gdpGrowthElement.className = growth >= 0 ? 'text-success' : 'text-danger';\n    }\n\n    if (this.unemploymentElement) {\n      this.unemploymentElement.textContent = this.formatPercentage(economy.unemployment);\n    }\n\n    if (this.inflationElement) {\n      const { inflation } = economy;\n      this.inflationElement.textContent = this.formatPercentage(inflation, 1);\n      this.inflationElement.className = '';\n      if (inflation > 4) {\n        this.inflationElement.classList.add('text-warning');\n      } else if (inflation < 1) {\n        this.inflationElement.classList.add('text-danger');\n      }\n    }\n\n    if (this.nationalDebtElement) {\n      const debtRatio = (gameState.country.debt / gameState.country.gdp) * 100;\n      this.nationalDebtElement.textContent = `${this.formatPercentage(debtRatio)} of GDP`;\n\n      if (debtRatio > 90) {\n        this.nationalDebtElement.className = 'text-danger';\n      } else if (debtRatio > 70) {\n        this.nationalDebtElement.className = 'text-warning';\n      } else {\n        this.nationalDebtElement.className = '';\n      }\n    }\n  }\n\n  /**\n   * Update political panel\n   */\n  updatePoliticalPanel(gameState) {\n    const { politics } = gameState;\n\n    if (this.coalitionSupportElement) {\n      const coalitionSupport = politics.coalition.reduce((sum, party) => sum + party.support, 0);\n      this.coalitionSupportElement.textContent = this.formatPercentage(coalitionSupport);\n    }\n\n    if (this.oppositionElement) {\n      const oppositionSupport = politics.opposition.reduce((sum, party) => sum + party.support, 0);\n      this.oppositionElement.textContent = this.formatPercentage(oppositionSupport);\n    }\n\n    if (this.independentsElement) {\n      const totalSupport = [...politics.coalition, ...politics.opposition]\n        .reduce((sum, party) => sum + party.support, 0);\n      const independents = Math.max(0, 100 - totalSupport);\n      this.independentsElement.textContent = this.formatPercentage(independents);\n    }\n\n    if (this.nextVoteElement) {\n      this.nextVoteElement.textContent = politics.nextVote ? politics.nextVote : 'None scheduled';\n    }\n  }\n\n  /**\n   * Update global panel\n   */\n  updateGlobalPanel(gameState) {\n    const { global } = gameState;\n\n    if (this.intlStandingElement) {\n      this.intlStandingElement.textContent = global.internationalStanding;\n    }\n\n    if (this.tradeBalanceElement) {\n      const balance = global.tradeBalance;\n      this.tradeBalanceElement.textContent = `${this.formatCurrency(balance / 1000000000, 'USD')}B`;\n      this.tradeBalanceElement.className = balance >= 0 ? 'text-success' : 'text-danger';\n    }\n\n    if (this.diplomaticRelationsElement) {\n      const avgRelation = Object.values(global.relations).reduce((sum, val) => sum + val, 0)\n                          / Object.values(global.relations).length;\n      this.diplomaticRelationsElement.textContent = this.formatNumber(avgRelation);\n    }\n  }\n\n  /**\n   * Update events and decisions\n   */\n  updateEvents(gameState) {\n    // Update recent events\n    if (this.recentEventsElement) {\n      this.recentEventsElement.innerHTML = '';\n      const events = gameState.events.recent.slice(-5); // Show last 5 events\n\n      if (events.length === 0) {\n        const li = this.createElement('li', '', 'No recent events');\n        this.recentEventsElement.appendChild(li);\n      } else {\n        events.forEach((event) => {\n          const li = this.createElement('li', '', event.description || event);\n          this.recentEventsElement.appendChild(li);\n        });\n      }\n    }\n\n    // Update pending decisions\n    if (this.pendingDecisionsElement) {\n      this.pendingDecisionsElement.innerHTML = '';\n      const decisions = gameState.events.pending;\n\n      if (decisions.length === 0) {\n        const li = this.createElement('li', '', 'No pending decisions');\n        this.pendingDecisionsElement.appendChild(li);\n      } else {\n        decisions.forEach((decision) => {\n          const li = this.createElement('li', 'decision-item', decision.description || decision);\n          this.addEventListener(li, 'click', () => {\n            this.handleDecisionClick(decision);\n          });\n          this.pendingDecisionsElement.appendChild(li);\n        });\n      }\n    }\n  }\n\n  /**\n   * Handle pause/resume toggle\n   */\n  handlePauseToggle() {\n    // This will be handled by the main game controller\n    eventSystem.emit('game:pause_toggle');\n  }\n\n  /**\n   * Handle save game\n   */\n  handleSaveGame() {\n    const saveName = prompt('Enter a name for your save:');\n    if (saveName !== null) {\n      eventSystem.emit(EVENTS.GAME_SAVE, { saveName });\n    }\n  }\n\n  /**\n   * Handle load game\n   */\n  handleLoadGame() {\n    // This would typically open a load game dialog\n    // For now, we'll just emit an event\n    eventSystem.emit('ui:load_game_dialog');\n  }\n\n  /**\n   * Handle decision click\n   */\n  handleDecisionClick(decision) {\n    // This would typically open a decision dialog\n    eventSystem.emit('ui:decision_dialog', { decision });\n    console.log('Decision clicked:', decision);\n  }\n}\n\nexport default Dashboard;\n","import { BaseComponent } from './BaseComponent';\n\n/**\n * Chart - Data visualization component for SP_Sim\n * Provides various chart types for displaying game metrics\n */\nexport class Chart extends BaseComponent {\n  constructor(containerId, options = {}) {\n    super(containerId);\n    this.options = {\n      type: 'line', // line, bar, pie, area\n      width: 400,\n      height: 200,\n      data: [],\n      labels: [],\n      colors: ['#3498db', '#e74c3c', '#27ae60', '#f39c12', '#9b59b6'],\n      title: '',\n      showGrid: true,\n      showAxes: true,\n      showLegend: true,\n      ...options,\n    };\n\n    this.canvas = null;\n    this.ctx = null;\n    this.initializeChart();\n  }\n\n  /**\n   * Initialize chart canvas\n   */\n  initializeChart() {\n    if (!this.element) {\n      console.error('Chart container element not found');\n      return;\n    }\n\n    // Create canvas element\n    this.canvas = this.createElement('canvas');\n    this.canvas.width = this.options.width;\n    this.canvas.height = this.options.height;\n    this.canvas.style.cssText = `\n      max-width: 100%;\n      height: auto;\n      border: 1px solid var(--border-color);\n      border-radius: var(--border-radius);\n    `;\n\n    this.element.innerHTML = '';\n    this.element.appendChild(this.canvas);\n\n    this.ctx = this.canvas.getContext('2d');\n    this.render();\n  }\n\n  /**\n   * Update chart with new data\n   */\n  updateData(data, labels = null) {\n    this.options.data = data;\n    if (labels) {\n      this.options.labels = labels;\n    }\n    this.render();\n  }\n\n  /**\n   * Render the chart\n   */\n  render() {\n    if (!this.ctx) return;\n\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Set up drawing context\n    this.ctx.font = '12px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n\n    // Calculate drawing area (leaving space for title, axes, legend)\n    const margins = {\n      top: this.options.title ? 30 : 20,\n      right: 20,\n      bottom: this.options.showAxes ? 40 : 20,\n      left: this.options.showAxes ? 50 : 20,\n    };\n\n    const chartArea = {\n      x: margins.left,\n      y: margins.top,\n      width: this.canvas.width - margins.left - margins.right,\n      height: this.canvas.height - margins.top - margins.bottom,\n    };\n\n    // Draw title\n    if (this.options.title) {\n      this.drawTitle();\n    }\n\n    // Draw chart based on type\n    switch (this.options.type) {\n      case 'line':\n        this.drawLineChart(chartArea);\n        break;\n      case 'bar':\n        this.drawBarChart(chartArea);\n        break;\n      case 'pie':\n        this.drawPieChart(chartArea);\n        break;\n      case 'area':\n        this.drawAreaChart(chartArea);\n        break;\n      default:\n        console.warn(`Chart type ${this.options.type} not supported`);\n    }\n\n    // Draw axes\n    if (this.options.showAxes && this.options.type !== 'pie') {\n      this.drawAxes(chartArea);\n    }\n\n    // Draw legend\n    if (this.options.showLegend) {\n      this.drawLegend(chartArea);\n    }\n  }\n\n  /**\n   * Draw chart title\n   */\n  drawTitle() {\n    this.ctx.save();\n    this.ctx.font = 'bold 14px Arial';\n    this.ctx.fillStyle = '#2c3e50';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText(this.options.title, this.canvas.width / 2, 15);\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw line chart\n   */\n  drawLineChart(area) {\n    const { data } = this.options;\n    if (!data.length) return;\n\n    const pointCount = data[0].values ? data[0].values.length : data.length;\n    const stepX = area.width / Math.max(1, pointCount - 1);\n\n    // Determine Y-axis range\n    const allValues = data.flatMap((series) => (series.values ? series.values : [series]))\n      .filter((v) => typeof v === 'number');\n\n    const minY = Math.min(...allValues);\n    const maxY = Math.max(...allValues);\n    const rangeY = maxY - minY || 1;\n\n    // Draw grid\n    if (this.options.showGrid) {\n      this.drawGrid(area, pointCount, 5);\n    }\n\n    // Draw data series\n    data.forEach((series, seriesIndex) => {\n      const color = this.options.colors[seriesIndex % this.options.colors.length];\n      const values = series.values || [series];\n\n      this.ctx.save();\n      this.ctx.strokeStyle = color;\n      this.ctx.lineWidth = 2;\n      this.ctx.beginPath();\n\n      values.forEach((value, index) => {\n        const x = area.x + index * stepX;\n        const y = area.y + area.height - ((value - minY) / rangeY) * area.height;\n\n        if (index === 0) {\n          this.ctx.moveTo(x, y);\n        } else {\n          this.ctx.lineTo(x, y);\n        }\n      });\n\n      this.ctx.stroke();\n      this.ctx.restore();\n\n      // Draw points\n      this.ctx.save();\n      this.ctx.fillStyle = color;\n      values.forEach((value, index) => {\n        const x = area.x + index * stepX;\n        const y = area.y + area.height - ((value - minY) / rangeY) * area.height;\n\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, 3, 0, 2 * Math.PI);\n        this.ctx.fill();\n      });\n      this.ctx.restore();\n    });\n  }\n\n  /**\n   * Draw bar chart\n   */\n  drawBarChart(area) {\n    const { data } = this.options;\n    if (!data.length) return;\n\n    const values = data.map((item) => item.value || item);\n    const maxValue = Math.max(...values);\n    const barWidth = (area.width / data.length) * 0.8;\n    const barSpacing = (area.width / data.length) * 0.2;\n\n    data.forEach((item, index) => {\n      const value = item.value || item;\n      const barHeight = (value / maxValue) * area.height;\n      const x = area.x + index * (barWidth + barSpacing) + barSpacing / 2;\n      const y = area.y + area.height - barHeight;\n\n      const color = this.options.colors[index % this.options.colors.length];\n\n      this.ctx.save();\n      this.ctx.fillStyle = color;\n      this.ctx.fillRect(x, y, barWidth, barHeight);\n\n      // Draw value label\n      this.ctx.fillStyle = '#2c3e50';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(\n        this.formatNumber(value),\n        x + barWidth / 2,\n        y - 10,\n      );\n      this.ctx.restore();\n    });\n  }\n\n  /**\n   * Draw pie chart\n   */\n  drawPieChart(area) {\n    const { data } = this.options;\n    if (!data.length) return;\n\n    const values = data.map((item) => item.value || item);\n    const total = values.reduce((sum, value) => sum + value, 0);\n    const centerX = area.x + area.width / 2;\n    const centerY = area.y + area.height / 2;\n    const radius = Math.min(area.width, area.height) / 2 - 20;\n\n    let currentAngle = -Math.PI / 2; // Start at top\n\n    data.forEach((item, index) => {\n      const value = item.value || item;\n      const sliceAngle = (value / total) * 2 * Math.PI;\n      const color = this.options.colors[index % this.options.colors.length];\n\n      // Draw slice\n      this.ctx.save();\n      this.ctx.fillStyle = color;\n      this.ctx.beginPath();\n      this.ctx.moveTo(centerX, centerY);\n      this.ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);\n      this.ctx.closePath();\n      this.ctx.fill();\n\n      // Draw slice border\n      this.ctx.strokeStyle = '#ffffff';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n      this.ctx.restore();\n\n      // Draw percentage label\n      const labelAngle = currentAngle + sliceAngle / 2;\n      const labelX = centerX + Math.cos(labelAngle) * radius * 0.7;\n      const labelY = centerY + Math.sin(labelAngle) * radius * 0.7;\n      const percentage = ((value / total) * 100).toFixed(1);\n\n      this.ctx.save();\n      this.ctx.fillStyle = '#ffffff';\n      this.ctx.font = 'bold 10px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(`${percentage}%`, labelX, labelY);\n      this.ctx.restore();\n\n      currentAngle += sliceAngle;\n    });\n  }\n\n  /**\n   * Draw area chart (filled line chart)\n   */\n  drawAreaChart(area) {\n    const { data } = this.options;\n    if (!data.length) return;\n\n    const pointCount = data[0].values ? data[0].values.length : data.length;\n    const stepX = area.width / Math.max(1, pointCount - 1);\n\n    const allValues = data.flatMap((series) => (series.values ? series.values : [series]))\n      .filter((v) => typeof v === 'number');\n\n    const minY = Math.min(0, ...allValues);\n    const maxY = Math.max(...allValues);\n    const rangeY = maxY - minY || 1;\n\n    // Draw filled areas\n    data.forEach((series, seriesIndex) => {\n      const color = this.options.colors[seriesIndex % this.options.colors.length];\n      const values = series.values || [series];\n\n      this.ctx.save();\n      this.ctx.fillStyle = `${color}40`; // Add transparency\n      this.ctx.beginPath();\n\n      // Start from bottom left\n      this.ctx.moveTo(area.x, area.y + area.height);\n\n      values.forEach((value, index) => {\n        const x = area.x + index * stepX;\n        const y = area.y + area.height - ((value - minY) / rangeY) * area.height;\n        this.ctx.lineTo(x, y);\n      });\n\n      // Close path to bottom right\n      this.ctx.lineTo(area.x + (values.length - 1) * stepX, area.y + area.height);\n      this.ctx.closePath();\n      this.ctx.fill();\n      this.ctx.restore();\n    });\n\n    // Draw line on top\n    this.drawLineChart(area);\n  }\n\n  /**\n   * Draw grid lines\n   */\n  drawGrid(area, xLines, yLines) {\n    this.ctx.save();\n    this.ctx.strokeStyle = '#e0e0e0';\n    this.ctx.lineWidth = 1;\n\n    // Vertical lines\n    for (let i = 0; i <= xLines; i += 1) {\n      const x = area.x + (i / xLines) * area.width;\n      this.ctx.beginPath();\n      this.ctx.moveTo(x, area.y);\n      this.ctx.lineTo(x, area.y + area.height);\n      this.ctx.stroke();\n    }\n\n    // Horizontal lines\n    for (let i = 0; i <= yLines; i += 1) {\n      const y = area.y + (i / yLines) * area.height;\n      this.ctx.beginPath();\n      this.ctx.moveTo(area.x, y);\n      this.ctx.lineTo(area.x + area.width, y);\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw axes\n   */\n  drawAxes(area) {\n    this.ctx.save();\n    this.ctx.strokeStyle = '#2c3e50';\n    this.ctx.lineWidth = 2;\n\n    // Y axis\n    this.ctx.beginPath();\n    this.ctx.moveTo(area.x, area.y);\n    this.ctx.lineTo(area.x, area.y + area.height);\n    this.ctx.stroke();\n\n    // X axis\n    this.ctx.beginPath();\n    this.ctx.moveTo(area.x, area.y + area.height);\n    this.ctx.lineTo(area.x + area.width, area.y + area.height);\n    this.ctx.stroke();\n\n    this.ctx.restore();\n\n    // Draw labels if available\n    if (this.options.labels.length > 0) {\n      this.drawAxisLabels(area);\n    }\n  }\n\n  /**\n   * Draw axis labels\n   */\n  drawAxisLabels(area) {\n    this.ctx.save();\n    this.ctx.fillStyle = '#2c3e50';\n    this.ctx.font = '10px Arial';\n    this.ctx.textAlign = 'center';\n\n    this.options.labels.forEach((label, index) => {\n      const x = area.x + (index / (this.options.labels.length - 1)) * area.width;\n      const y = area.y + area.height + 15;\n      this.ctx.fillText(label, x, y);\n    });\n\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw legend\n   */\n  drawLegend(area) {\n    if (!this.options.data.some((item) => item.name)) return;\n\n    const legendY = area.y + area.height + 30;\n    let legendX = area.x;\n    const legendItemWidth = 100;\n\n    this.ctx.save();\n    this.ctx.font = '10px Arial';\n    this.ctx.textAlign = 'left';\n\n    this.options.data.forEach((item, index) => {\n      if (!item.name) return;\n\n      const color = this.options.colors[index % this.options.colors.length];\n\n      // Draw color box\n      this.ctx.fillStyle = color;\n      this.ctx.fillRect(legendX, legendY - 6, 12, 12);\n\n      // Draw text\n      this.ctx.fillStyle = '#2c3e50';\n      this.ctx.fillText(item.name, legendX + 16, legendY);\n\n      legendX += legendItemWidth;\n    });\n\n    this.ctx.restore();\n  }\n}\n\nexport default Chart;\n","import { BaseComponent } from './BaseComponent';\nimport { Chart } from './Chart';\nimport { eventSystem } from '../../core/EventSystem';\nimport { economicSimulation } from '../../core/EconomicSimulation';\n\n/**\n * EconomicsScreen - Detailed economic simulation interface\n * Shows comprehensive economic data, charts, and policy options\n */\nexport class EconomicsScreen extends BaseComponent {\n  constructor() {\n    super();\n    this.charts = {};\n    this.economicData = null;\n    this.forecast = null;\n\n    this.initializeScreen();\n    this.setupEventListeners();\n  }\n\n  /**\n   * Initialize the economics screen\n   */\n  initializeScreen() {\n    // Create screen container\n    let screenElement = document.querySelector('#screen-economy');\n    if (!screenElement) {\n      screenElement = this.createElement('div', 'screen');\n      screenElement.id = 'screen-economy';\n\n      const mainContent = document.querySelector('.main-content');\n      if (mainContent) {\n        mainContent.appendChild(screenElement);\n      }\n    }\n\n    this.element = screenElement;\n    this.renderEconomicsScreen();\n  }\n\n  /**\n   * Render the economics screen content\n   */\n  renderEconomicsScreen() {\n    this.element.innerHTML = `\n      <div class=\"economics-screen\">\n        <div class=\"economics-header\">\n          <h1>Economic Simulation</h1>\n          <div class=\"economic-phase\">\n            <span class=\"phase-indicator\">Current Phase: <strong id=\"economic-phase\">Expansion</strong></span>\n            <span class=\"phase-duration\">Duration: <strong id=\"phase-duration\">0 weeks</strong></span>\n          </div>\n        </div>\n\n        <div class=\"economics-content\">\n          <!-- Key Metrics Dashboard -->\n          <div class=\"metrics-grid\">\n            <div class=\"metric-card gdp-card\">\n              <h3>GDP Growth</h3>\n              <div class=\"metric-value\" id=\"gdp-growth-detailed\">2.1%</div>\n              <div class=\"metric-trend\" id=\"gdp-trend\">▲ Stable</div>\n            </div>\n            <div class=\"metric-card unemployment-card\">\n              <h3>Unemployment</h3>\n              <div class=\"metric-value\" id=\"unemployment-detailed\">6.0%</div>\n              <div class=\"metric-trend\" id=\"unemployment-trend\">▼ Decreasing</div>\n            </div>\n            <div class=\"metric-card inflation-card\">\n              <h3>Inflation</h3>\n              <div class=\"metric-value\" id=\"inflation-detailed\">2.4%</div>\n              <div class=\"metric-trend\" id=\"inflation-trend\">▲ Increasing</div>\n            </div>\n            <div class=\"metric-card confidence-card\">\n              <h3>Economic Confidence</h3>\n              <div class=\"metric-value\" id=\"confidence-detailed\">75</div>\n              <div class=\"metric-trend\" id=\"confidence-trend\">▲ Positive</div>\n            </div>\n          </div>\n\n          <!-- Charts Section -->\n          <div class=\"charts-section\">\n            <div class=\"chart-container\">\n              <h3>Economic Trends</h3>\n              <div id=\"economic-trends-chart\" class=\"chart\"></div>\n            </div>\n            <div class=\"chart-container\">\n              <h3>Sector Performance</h3>\n              <div id=\"sector-performance-chart\" class=\"chart\"></div>\n            </div>\n          </div>\n\n          <!-- Forecast Section -->\n          <div class=\"forecast-section\">\n            <h3>Economic Forecast (Next 12 Weeks)</h3>\n            <div id=\"forecast-chart\" class=\"chart\"></div>\n            <div class=\"forecast-summary\">\n              <p id=\"forecast-summary-text\">Economic projections will be displayed here.</p>\n            </div>\n          </div>\n\n          <!-- Sector Breakdown -->\n          <div class=\"sectors-section\">\n            <h3>Economic Sectors</h3>\n            <div class=\"sectors-grid\">\n              <div class=\"sector-card agriculture-sector\">\n                <h4>Agriculture</h4>\n                <div class=\"sector-share\" id=\"agriculture-share\">5%</div>\n                <div class=\"sector-growth\" id=\"agriculture-growth\">+1.2%</div>\n              </div>\n              <div class=\"sector-card manufacturing-sector\">\n                <h4>Manufacturing</h4>\n                <div class=\"sector-share\" id=\"manufacturing-share\">25%</div>\n                <div class=\"sector-growth\" id=\"manufacturing-growth\">+2.8%</div>\n              </div>\n              <div class=\"sector-card services-sector\">\n                <h4>Services</h4>\n                <div class=\"sector-share\" id=\"services-share\">70%</div>\n                <div class=\"sector-growth\" id=\"services-growth\">+2.0%</div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Policy Tools -->\n          <div class=\"policy-section\">\n            <h3>Economic Policy Tools</h3>\n            <div class=\"policy-categories\">\n              <div class=\"policy-category fiscal-policies\">\n                <h4>Fiscal Policies</h4>\n                <div class=\"policy-buttons\">\n                  <button class=\"btn btn--primary\" id=\"fiscal-stimulus-btn\">Fiscal Stimulus</button>\n                  <button class=\"btn btn--primary\" id=\"tax-cut-btn\">Tax Cuts</button>\n                  <button class=\"btn btn--secondary\" id=\"tax-increase-btn\">Tax Increase</button>\n                  <button class=\"btn btn--primary\" id=\"infrastructure-btn\">Infrastructure Investment</button>\n                </div>\n              </div>\n              \n              <div class=\"policy-category monetary-policies\">\n                <h4>Monetary Policies</h4>\n                <div class=\"policy-buttons\">\n                  <button class=\"btn btn--secondary\" id=\"interest-rate-btn\">Adjust Interest Rates</button>\n                </div>\n              </div>\n\n              <div class=\"policy-category sector-policies\">\n                <h4>Sector-Specific Policies</h4>\n                <div class=\"policy-buttons\">\n                  <button class=\"btn btn--primary\" id=\"education-investment-btn\">Education Investment</button>\n                  <button class=\"btn btn--primary\" id=\"healthcare-investment-btn\">Healthcare Investment</button>\n                  <button class=\"btn btn--primary\" id=\"green-energy-btn\">Green Energy Initiative</button>\n                  <button class=\"btn btn--primary\" id=\"agricultural-subsidies-btn\">Agricultural Subsidies</button>\n                </div>\n              </div>\n\n              <div class=\"policy-category trade-regulation\">\n                <h4>Trade & Regulation</h4>\n                <div class=\"policy-buttons\">\n                  <button class=\"btn btn--primary\" id=\"trade-promotion-btn\">Trade Promotion</button>\n                  <button class=\"btn btn--secondary\" id=\"regulation-increase-btn\">Increase Regulation</button>\n                  <button class=\"btn btn--primary\" id=\"regulation-decrease-btn\">Decrease Regulation</button>\n                  <button class=\"btn btn--primary\" id=\"minimum-wage-btn\">Minimum Wage Increase</button>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"active-policies\">\n              <h4>Active Policies</h4>\n              <ul id=\"active-policies-list\">\n                <li>No active economic policies</li>\n              </ul>\n            </div>\n          </div>\n\n          <!-- Economic Events -->\n          <div class=\"events-section\">\n            <h3>Recent Economic Events</h3>\n            <ul id=\"economic-events-list\" class=\"events-list\">\n              <li>Economic simulation initialized</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    `;\n\n    this.initializeCharts();\n    this.setupPolicyButtons();\n  }\n\n  /**\n   * Initialize charts\n   */\n  initializeCharts() {\n    // Economic trends chart\n    this.charts.trends = new Chart('economic-trends-chart', {\n      type: 'line',\n      width: 500,\n      height: 200,\n      title: 'Economic Indicators Over Time',\n      data: [\n        { name: 'GDP Growth', values: [], color: '#3498db' },\n        { name: 'Unemployment', values: [], color: '#e74c3c' },\n        { name: 'Inflation', values: [], color: '#f39c12' },\n      ],\n      showLegend: true,\n    });\n\n    // Sector performance chart\n    this.charts.sectors = new Chart('sector-performance-chart', {\n      type: 'pie',\n      width: 300,\n      height: 200,\n      title: 'Economic Sectors',\n      data: [\n        { name: 'Agriculture', value: 5 },\n        { name: 'Manufacturing', value: 25 },\n        { name: 'Services', value: 70 },\n      ],\n      showLegend: true,\n    });\n\n    // Forecast chart\n    this.charts.forecast = new Chart('forecast-chart', {\n      type: 'line',\n      width: 600,\n      height: 200,\n      title: 'Economic Forecast',\n      data: [],\n      showLegend: true,\n    });\n  }\n\n  /**\n   * Setup policy button event handlers\n   */\n  setupPolicyButtons() {\n    // Fiscal Policies\n    const fiscalBtn = document.getElementById('fiscal-stimulus-btn');\n    const taxBtn = document.getElementById('tax-cut-btn');\n    const taxIncreaseBtn = document.getElementById('tax-increase-btn');\n    const infraBtn = document.getElementById('infrastructure-btn');\n\n    // Monetary Policies\n    const interestBtn = document.getElementById('interest-rate-btn');\n\n    // Sector Policies\n    const educationBtn = document.getElementById('education-investment-btn');\n    const healthcareBtn = document.getElementById('healthcare-investment-btn');\n    const greenEnergyBtn = document.getElementById('green-energy-btn');\n    const agriSubsidiesBtn = document.getElementById('agricultural-subsidies-btn');\n\n    // Trade & Regulation\n    const tradePromotionBtn = document.getElementById('trade-promotion-btn');\n    const regIncreaseBtn = document.getElementById('regulation-increase-btn');\n    const regDecreaseBtn = document.getElementById('regulation-decrease-btn');\n    const minWageBtn = document.getElementById('minimum-wage-btn');\n\n    // Fiscal Policy Handlers\n    if (fiscalBtn) {\n      this.addEventListener(fiscalBtn, 'click', () => {\n        this.implementPolicy('fiscal_stimulus', {\n          name: 'Fiscal Stimulus Package',\n          amount: 0.02,\n          duration: 24,\n        });\n      });\n    }\n\n    if (taxBtn) {\n      this.addEventListener(taxBtn, 'click', () => {\n        this.implementPolicy('tax_cut', {\n          name: 'Tax Cuts',\n          amount: 0.015,\n          duration: 52,\n        });\n      });\n    }\n\n    if (taxIncreaseBtn) {\n      this.addEventListener(taxIncreaseBtn, 'click', () => {\n        this.implementPolicy('tax_increase', {\n          name: 'Tax Increase',\n          amount: 0.02,\n          duration: 52,\n        });\n      });\n    }\n\n    if (infraBtn) {\n      this.addEventListener(infraBtn, 'click', () => {\n        this.implementPolicy('infrastructure_investment', {\n          name: 'Infrastructure Investment',\n          amount: 0.05,\n          duration: 104,\n        });\n      });\n    }\n\n    // Monetary Policy Handlers\n    if (interestBtn) {\n      this.addEventListener(interestBtn, 'click', () => {\n        const change = prompt('Enter interest rate change (e.g., -0.5 for 0.5% decrease):');\n        if (change !== null) {\n          this.implementPolicy('interest_rate_change', {\n            name: `Interest Rate ${parseFloat(change) > 0 ? 'Increase' : 'Decrease'}`,\n            change: parseFloat(change) || 0,\n            duration: 1,\n          });\n        }\n      });\n    }\n\n    // Sector Policy Handlers\n    if (educationBtn) {\n      this.addEventListener(educationBtn, 'click', () => {\n        this.implementPolicy('education_investment', {\n          name: 'Education Investment',\n          amount: 0.03,\n          duration: 78,\n        });\n      });\n    }\n\n    if (healthcareBtn) {\n      this.addEventListener(healthcareBtn, 'click', () => {\n        this.implementPolicy('healthcare_investment', {\n          name: 'Healthcare Investment',\n          amount: 0.025,\n          duration: 104,\n        });\n      });\n    }\n\n    if (greenEnergyBtn) {\n      this.addEventListener(greenEnergyBtn, 'click', () => {\n        this.implementPolicy('green_energy_investment', {\n          name: 'Green Energy Initiative',\n          amount: 0.04,\n          duration: 156,\n        });\n      });\n    }\n\n    if (agriSubsidiesBtn) {\n      this.addEventListener(agriSubsidiesBtn, 'click', () => {\n        this.implementPolicy('agricultural_subsidies', {\n          name: 'Agricultural Subsidies',\n          amount: 0.006,\n          duration: 52,\n        });\n      });\n    }\n\n    // Trade & Regulation Handlers\n    if (tradePromotionBtn) {\n      this.addEventListener(tradePromotionBtn, 'click', () => {\n        this.implementPolicy('trade_promotion', {\n          name: 'Trade Promotion Initiative',\n          amount: 0.012,\n          duration: 39,\n        });\n      });\n    }\n\n    if (regIncreaseBtn) {\n      this.addEventListener(regIncreaseBtn, 'click', () => {\n        this.implementPolicy('regulation_increase', {\n          name: 'Increase Regulations',\n          amount: 0.015,\n          duration: 26,\n        });\n      });\n    }\n\n    if (regDecreaseBtn) {\n      this.addEventListener(regDecreaseBtn, 'click', () => {\n        this.implementPolicy('regulation_decrease', {\n          name: 'Decrease Regulations',\n          amount: 0.02,\n          duration: 26,\n        });\n      });\n    }\n\n    if (minWageBtn) {\n      this.addEventListener(minWageBtn, 'click', () => {\n        this.implementPolicy('minimum_wage_increase', {\n          name: 'Minimum Wage Increase',\n          amount: 0.008,\n          duration: 26,\n        });\n      });\n    }\n  }\n\n  /**\n   * Setup event listeners\n   */\n  setupEventListeners() {\n    eventSystem.on('economic:update', (event) => {\n      this.economicData = event.data;\n      this.updateDisplay();\n    });\n\n    eventSystem.on('economic:event', (event) => {\n      this.addEconomicEvent(event.data);\n    });\n\n    eventSystem.on('economic:policy_applied', (_event) => {\n      this.updateActivePolicies();\n    });\n  }\n\n  /**\n   * Update the display with current economic data\n   */\n  updateDisplay() {\n    if (!this.economicData) return;\n\n    const { metrics, sectors, cycle } = this.economicData;\n\n    // Update key metrics\n    this.updateElement('gdp-growth-detailed', `${metrics.gdpGrowth.toFixed(1)}%`);\n    this.updateElement('unemployment-detailed', `${metrics.unemployment.toFixed(1)}%`);\n    this.updateElement('inflation-detailed', `${metrics.inflation.toFixed(1)}%`);\n    this.updateElement('confidence-detailed', metrics.confidence.toFixed(0));\n\n    // Update business cycle info\n    this.updateElement('economic-phase', cycle.phase.charAt(0).toUpperCase() + cycle.phase.slice(1));\n    this.updateElement('phase-duration', `${cycle.duration} weeks`);\n\n    // Update sector information\n    Object.keys(sectors).forEach((sectorName) => {\n      const sector = sectors[sectorName];\n      this.updateElement(`${sectorName}-share`, `${(sector.share * 100).toFixed(0)}%`);\n      this.updateElement(`${sectorName}-growth`, `${sector.currentGrowth?.toFixed(1) || sector.growth.toFixed(1)}%`);\n    });\n\n    // Update trends\n    this.updateTrends(metrics);\n\n    // Update sector chart\n    this.updateSectorChart(sectors);\n\n    // Update forecast\n    this.updateForecast();\n  }\n\n  /**\n   * Update trends chart\n   */\n  updateTrends(metrics) {\n    // This would ideally store historical data\n    // For now, we'll just update with current values\n    const trendData = [\n      { name: 'GDP Growth', values: [metrics.gdpGrowth] },\n      { name: 'Unemployment', values: [metrics.unemployment] },\n      { name: 'Inflation', values: [metrics.inflation] },\n    ];\n\n    this.charts.trends.updateData(trendData);\n  }\n\n  /**\n   * Update sector chart\n   */\n  updateSectorChart(sectors) {\n    const sectorData = Object.keys(sectors).map((name) => ({\n      name: name.charAt(0).toUpperCase() + name.slice(1),\n      value: sectors[name].share * 100,\n    }));\n\n    this.charts.sectors.updateData(sectorData);\n  }\n\n  /**\n   * Update forecast chart\n   */\n  updateForecast() {\n    this.forecast = economicSimulation.getForecast(12);\n\n    const forecastData = [\n      { name: 'GDP Growth', values: this.forecast.gdpGrowth },\n      { name: 'Unemployment', values: this.forecast.unemployment },\n      { name: 'Inflation', values: this.forecast.inflation },\n    ];\n\n    const labels = Array.from({ length: 12 }, (_, i) => `Week ${i + 1}`);\n\n    this.charts.forecast.updateData(forecastData, labels);\n\n    // Update forecast summary\n    const summaryText = this.generateForecastSummary();\n    this.updateElement('forecast-summary-text', summaryText);\n  }\n\n  /**\n   * Generate forecast summary text\n   */\n  generateForecastSummary() {\n    if (!this.forecast) return 'Forecast data not available.';\n\n    const finalGDP = this.forecast.gdpGrowth[this.forecast.gdpGrowth.length - 1];\n    const finalUnemployment = this.forecast.unemployment[this.forecast.unemployment.length - 1];\n    const finalInflation = this.forecast.inflation[this.forecast.inflation.length - 1];\n\n    let summary = 'Economic forecast shows ';\n\n    if (finalGDP > this.economicData.metrics.gdpGrowth) {\n      summary += 'improving growth, ';\n    } else {\n      summary += 'slowing growth, ';\n    }\n\n    if (finalUnemployment < this.economicData.metrics.unemployment) {\n      summary += 'decreasing unemployment, ';\n    } else {\n      summary += 'rising unemployment, ';\n    }\n\n    summary += `and inflation ${finalInflation > 3 ? 'above target' : 'near target'}.`;\n\n    return summary;\n  }\n\n  /**\n   * Implement economic policy\n   */\n  implementPolicy(type, policy) {\n    eventSystem.emit('policy:implemented', {\n      policy: { type, ...policy },\n    });\n\n    // Add to game events\n    eventSystem.emit('economic:event', {\n      type: 'policy_implemented',\n      message: `Implemented: ${policy.name}`,\n      severity: 'info',\n    });\n  }\n\n  /**\n   * Update active policies display\n   */\n  updateActivePolicies() {\n    const economicState = economicSimulation.getEconomicState();\n    const policiesList = document.getElementById('active-policies-list');\n\n    if (policiesList) {\n      if (economicState.activePolicies === 0) {\n        policiesList.innerHTML = '<li>No active economic policies</li>';\n      } else {\n        policiesList.innerHTML = `<li>${economicState.activePolicies} active economic policies</li>`;\n      }\n    }\n  }\n\n  /**\n   * Add economic event to the events list\n   */\n  addEconomicEvent(event) {\n    const eventsList = document.getElementById('economic-events-list');\n    if (eventsList) {\n      const eventItem = this.createElement('li', `event-${event.severity || 'info'}`, event.message);\n      eventsList.insertBefore(eventItem, eventsList.firstChild);\n\n      // Keep only last 10 events\n      while (eventsList.children.length > 10) {\n        eventsList.removeChild(eventsList.lastChild);\n      }\n    }\n  }\n\n  /**\n   * Update element text content safely\n   */\n  updateElement(id, content) {\n    const element = document.getElementById(id);\n    if (element) {\n      element.textContent = content;\n    }\n  }\n\n  /**\n   * Show the economics screen\n   */\n  show() {\n    super.show();\n\n    // Update display when screen becomes visible\n    this.economicData = economicSimulation.getEconomicState();\n    this.updateDisplay();\n  }\n}\n\nexport default EconomicsScreen;\n"],"names":[],"mappings":"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"}