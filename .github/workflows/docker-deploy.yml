name: Docker VPS Deployment Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  deployments: write

env:
  NODE_VERSION: '22.x'
  VITE_BUILD_MODE: 'production'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-test-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm run test

      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production
          VITE_BUILD_MODE: production

      - name: Inject build timestamp
        run: date > dist/.timestamp

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/

  build-docker:
    needs: lint-test-build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Output image digest
        run: echo ${{ steps.build.outputs.digest }}

  security-scan:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-vps:
    needs: [build-docker, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          # Copy deployment files to VPS
          scp -r docker-compose.yml nginx.conf scripts/ ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_DEPLOY_PATH }}/
          
          # Execute deployment script on VPS
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ${{ secrets.VPS_DEPLOY_PATH }}
            
            # Set environment variables
            export TAG=${{ github.sha }}
            export VPS_DEPLOY_PATH=${{ secrets.VPS_DEPLOY_PATH }}
            export VPS_SITE_URL=${{ secrets.VPS_SITE_URL }}
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Run deployment script
            chmod +x scripts/deploy-docker.sh
            ./scripts/deploy-docker.sh
          EOF

      - name: Verify deployment
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ${{ secrets.VPS_DEPLOY_PATH }}
            
            # Set environment variables for health check
            export VPS_SITE_URL=${{ secrets.VPS_SITE_URL }}
            export CONTAINER_NAME=sp_sim_app
            
            # Run health check
            chmod +x scripts/health-check-docker.sh
            ./scripts/health-check-docker.sh all
          EOF

      - name: Rollback on failure
        if: failure()
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ${{ secrets.VPS_DEPLOY_PATH }}
            
            # Set environment variables for rollback
            export VPS_DEPLOY_PATH=${{ secrets.VPS_DEPLOY_PATH }}
            export VPS_SITE_URL=${{ secrets.VPS_SITE_URL }}
            
            # Run rollback script
            chmod +x scripts/rollback-docker.sh
            ./scripts/rollback-docker.sh previous
          EOF

      - name: Cleanup old images
        if: success()
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            # Keep only the last 3 versions of the image, ensuring no images in use are removed
            docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "{{.Repository}}:{{.Tag}}" | \
            while read image; do
              # Check if the image is in use by any running container
              if ! docker ps --format "{{.Image}}" | grep -q "^$image$"; then
                echo "$image"
              fi
            done | tail -n +4 | xargs -r docker rmi
          EOF

  # Keep existing GitHub Pages deployment for backward compatibility
  deploy-github-pages:
    needs: lint-test-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: dist
          publish_branch: gh-pages
          commit_message: 'ðŸš€ Deploy production build from commit ${{ github.sha }}'
          force_orphan: true